1) Components :- 

[The core UI building block-compose UI by combining multiple components]

==> Components are UI building blocks.

it's building of the blocks of react A/p . A componeny a self contained module [html+css+JS] that renders are output

=======
Notes =
=======

Separation of Concerns ==> Any Websites/Apps can ve broken down into smaller building blocks : components it also handle different data and logics 
                           Vastly simplifies the process of working in complex apps 

Related code Lives Together ==> It can be therfore built by creating & combining[HTML+css+Javascript] code together and make such components 
                                Since JS influence the output storing JS+HTML to make sense

Reusable Building Blocks ==> The same component is used multiple time [Reusable building blocks ] with different parts of UI input data [ex a reusable button]


****************************************************************
2 Important Rules for Components Functions
****************************************************************

A) Name Start with Uppercase character 

==> The function name Start with Uppercase 
==> Multi-Words Names should be written Pascal Case[ex MyHeader]
==> Pick Name that describe the UI building block [eg "Header" or "MyHeader"]

B) Returns "renderable" content

==> function must returns value that can be rendered ("display on Screen") by react
==> In most cases: Returns JSX also allows String,number,boolean,null,array of allowed values




function(){
    return<h1>Hello JS</h1>;
}

2) JSX :- 

[Return (Potentially Dynamic) HTML(ish) code to define the actual markup that will be rendered]

JSX is a syntax extensions to Javascript. it's similar to a template language but it has full power of Javascript (e.g it may output dynamic content)

<div>

<h1> Welcome {username} </h1>
<P>Time to learn react </p>

</div>


3) Props :- 

[Make Components configurable (and therefore reusable) by passing input data to them]

Components accept arbitary inputs called props. they are like function argument

function Welcome (props){
    return <h1>Hello,{props.name}</h1>;
}


4) State :- 

[React-managed data which,when changed causes component to re-render & the UI to update ]

It allows React component to change their output over time in response to user action network response and anything else

function counter (){

        const[isVisible,setIsVisible]=useState(false);
        
        function handleClick(){
            setIsVisible(true);
        }


        }


REACT ESSENTIALS  [Components,JSX & State]
====================

===> building UI with Components
===> Using Sharing & Outputing Data
===> Handling User Events
===> Building Interactive UIs with State



==============================================================================================================

Diffrence Between In Build Components and Custom Components

==============================================================================================================


InBuild Components                                                      Custom Components 

1) Name Start with lowercase                                        || 1) Name Start with Uppercase
2) Only valid officialy defined HTML elements are allowed           || 2) Defined by User "Wraps built in other custom components"
3) Aee rendered as DOM nodes by React(i.e. displayed on the Screen) || 3) React "travers" the componenttree until it has only built-in component left


==============================================================================================================

Diffrence Between In Static content and Dynamic content

==============================================================================================================


Static content                                            Dynamic content

1) content that's hardcoded into the JSX code   || 1) Logic that produce the actualvalue is added to JSX
2) Can't Change Runtime                         || 2) content /Value is derived at Runtime
3) Ex:- <h1>Hello World </h1>                   || 3) Ex <h1>Hello {username} </h1> 


REACT Project  & The Build process

React Code ===>                          Build Process                                    ===> Deployable files
[code write and test ]                [- Change and optimize your code]             [A collection of generated files that can includes your
                                      [- Transform such that run in browser]        Optimized code any other extra Assets 
                                      [- Also Optimize other assets like CSS        eg CSS code files, Optimize images etc   ]
                                      and Image files]




                                               Configure Components With "Props"

                   '   React Allows you to Pass Data to Component Via Concept called "Props" '
                  =======================================================================================
                  
                                    Set Props                                       Receive Props
JSX Code that use a Component        =====>                  Component                =====>                   Component Functions


[set component input Data                        [- Define Internal Logic +JSX code                [Receive Props paramentr with Configure Data]
via "custom HTML attributes(Props)"]                That should be rendered]                      
          
                                      
           
Rules of Hooks

1) Only call Hooks inside of Component  Functions

==> React Hooks Must not be called outside of react component function


function apps(){                            || const [val, setval]=useState(0);   
    const [val, setval]=useState(0);        || function apps(){...}
}                                           ||    



2) Only call Hooks on the Top level

==> React Hooks Must not be called in nested code stament (eg inside of if else stament)


function apps(){                            || function apps(){  
    const [val, setval]=useState(0);        || if (someCondition)
}                                           || const [val, setval]=useState(0); }   


Manage State 
================

Manage data & "tell" REACT to re-execute a component function via REACT's useState() Hooks

State update lead to new State values
(as the component function execute again)

const[counter,setCounter]=useState(0);

Current State value ==> "It's provided by React may change if the component
                        function is executed again"

State updating function ==> "update the store value & 'tells' React to re-execute
                             the component function in which useState() was called"

Initial State Value ===> store by react