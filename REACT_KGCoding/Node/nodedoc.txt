Node JS is runtime JS

node JS ===> uses====>V8
||                       =====> Compiles to ===> Machine Code
||                    ^^   
||                    ||  
||                    || 
||==>C++===> Written In 
||                  ||
||                  ||
||======> JS===> compiles JS



client[Browser] =====> req=====> Server [http:.....]---> DB,auth,input validation [Node JS]
JS,html,CSS                <===== res <======||


Role of Node JS

Run Server :- create Server & Listen to incoming request

Bussiness Logic :- Handle request , Validate Input , Connect to database

Return Response :- Return Response[rendered HTML,JSON,...]



Course

Basics                          Done
JS concepts                     Done
Node JS Basics                  Done
Efficeint devlopment            Done
Using Express JS                Done
Template Engine                 Done
MVC                             Done
Adv Routes & Modules
Node + My SQL
Using sequlize
Node + No SQL [Mongo DB]
Mongoose
Sessions & Cookies
Authentication
Sending Emails
Authentication Deep dive
User Input validation
Error Handling
File Uploads & Downloads
Pagination
Async request
Handling Payments
Rest API [Basics]
Rest API Features [Advance]
Using Async Wait
Websocket and Socket Io
GraphQL
Deployment
Beyond Web Servers
Node +  TypeScript + Deno



Basics
===========

REPL means

R means ===>  Read  User Input
E means ===> Evaluate User Input
P means ===> Print Output (Results)
L means ===> Wait for new Input


Node JS Basics
===============


How Does the Web Work

Creating a Node.JS Server

Using Node Core Modules

http        ==> Launch server, send requests
https       ==> Launch SSL server
fs          ==>  fetch file
path        ==> path file
os          ==> version of browser/system
=======================
Streams and Buffers
=======================

Examples :- Incoming Request

Streams =====> request Body Part 1 =====> request Body Part 2 =====> request Body Part 3 =====> request Body Part 4 =====> Fully Parsed

||                  ||                      || How do you                   ||                      ||
||                  ||    My Code           || work with flow data          ||                      ||
||                  ||=============> ====>  ||==================>           ||=====> Buffer=========||
||==> Idea                                      work with chunk data
Start working on the Data Early


Working with Request and Response

Async Code & The Event Loop



Incoming Request
        ||
        ||
        ||
        ||
    \/==||================\/
your code        Single JS thread====> fs  ======> send to =====> Worked pool===> Different Threads 
                        ||                                      Do the Heavy lifting    
                        ||
                        ||===>start===> Event Loop
                                Handle Event call back


Event Loop

Timers [Executes setInterval callbacks]                                                                 process.exit [refs==0]

    /|\    Pending callbacks [Executes I/O-related callbacks that were deferred]  <====
     |                       ||                                                       |                  
   jump                      || I/O ?                                                 |  
timer execute                ||                                                       |  or defer execution
    ||                       \/                                                       |   
                     Input and Output                                                 |  
    ||          Disk & n/w operations(~ Blocking Operation)                           |
                            ||                                                        |  
    ||                      ||                                                        |  
                            ||                                                        |  
    ||                      \/                                                        |  
                           Poll                                                       |          
    ==== Retrive new I/O events execute their callbacks    ===========================   



    Module Summary
=========================================

Client ===> Request ====> Server ====> Response ===> Client   [How Web works]

Program Lifecycle and Event Loop
--------------------------------

-> Node.js Run non-blocking js code and uses an events driven code [Event Loop] for running your Logic

-> A Node Program exit asap there is no more work to do

Note createServer() event never finished by defult


Async Code
--------------------------------

-> Js code is non-blocking
-> use callbacks and event => Order changes


Request and Response
--------------------------------

-> Parse request data in chunk [Streams and Buffer]
-> Avoid "Double response"

Node.js & Core Modules
--------------------------------

-> Node.js ships with multiple Core modules [http,https,fs,path...]
-> Core modules can be imported into any fileto be used there 
-> Import via require ('Module')


The Node Module system
--------------------------------

-> Import via require ('./path-to-file') for custom file or require ('Module') for Core and third-party modules 
-> Export via Module.Exports or just Export (for multiple Export)


Manage Data without DB
Render Dynamic content in our views
Understanding Template Engine



Devlop and Work on Logic [DSA Language]
Able to check /Verify Machine Code
Prompt Engineering
Application Life Cycle
Secure & Customise the Machine code as BR
How to Customize Machine Code



Template Engine  
=========================
   |                       |
        |                       

HTMLish Template ===============
                        |
                        |                       
                        |       
Node/Express content    |         Template Engine
                        |
                        \/
            Replace PlaceHolders /Snippets
                with HTML content
                    |
                    |                       
                   \|/ 
                HTML File   

EJS                 PUG[JADE]       Handlebars
<p><%=name%></p>    P#{name}        <p> {{name}} </p> 


MVC
==========

Models ==> Represent & Managing Data in your code, Allow work with your data [save, fetch, etc],Does not Manage data in memory , files and database

Views ==> It's What the User Sees, Decoupled from your Application code

Controls [Routes, Split across Middleware Functions] ==> Connecting your Models and your Views , contains the "in-between" both direction communicate logic

